{"file_contents":{"README.md":{"content":"# DashTrack - Personal Dashboard\n\nA comprehensive personal dashboard built with React and Express that helps users track and manage various aspects of their daily life.\n\n## Features\n\n- **Music Tracking** - Manually track music listening history\n- **Todo Management** - Create and manage todo lists\n- **Project Management** - Track project progress and tasks\n- **Habit Tracking** - Monitor daily habits and routines\n- **Fitness Tracking** - Log workouts and fitness activities\n- **Meal Planning** - Plan and track meals\n- **Daily Schedule** - Organize daily activities\n- **Calendar Integration** - Connect with iCal calendars\n- **RSS Feed** - Aggregate RSS feeds\n- **Budget Tracking** - Monitor expenses and budget\n- **Reading Progress** - Track reading through Goodreads integration\n\n## GitHub Pages Deployment\n\nThis application is configured to deploy to GitHub Pages at: `https://michaelajenkins05-dot.github.io/DashTrack/`\n\n### Deployment Setup\n\n1. **Repository Configuration**:\n   - Ensure the repository is named appropriately\n   - Enable GitHub Pages in repository settings\n   - Set source to \"GitHub Actions\"\n\n2. **Automatic Deployment**:\n   - The included GitHub Actions workflow (`.github/workflows/deploy.yml`) automatically builds and deploys the application\n   - Triggers on pushes to the `main` branch\n   - Builds the application and deploys to the `/DashTrack/` subdirectory\n\n3. **URL Structure**:\n   - Main application: `https://michaelajenkins05-dot.github.io/DashTrack/`\n   - Automatic redirect from root: `https://michaelajenkins05-dot.github.io/` â†’ `/DashTrack/`\n\n## Development\n\n### Prerequisites\n- Node.js 20+\n- npm\n\n### Setup\n```bash\nnpm install\nnpm run dev\n```\n\nThe application will be available at `http://localhost:5000`\n\n### Building\n```bash\nnpm run build\n```\n\n## Architecture\n\n- **Frontend**: React 18 with TypeScript, Vite build system\n- **UI Library**: shadcn/ui components with Radix UI primitives\n- **Styling**: Tailwind CSS with custom warm color scheme (#DD5423 based)\n- **State Management**: TanStack Query for server state\n- **Routing**: Wouter for client-side routing with GitHub Pages base path support\n- **Backend**: Express.js with in-memory storage for MVP\n- **Database**: Drizzle ORM with schema for future PostgreSQL integration\n\n## Color Scheme\n\nThe application uses a warm color palette based on **#DD5423** (HSL: 13, 75%, 51%):\n- Primary accent: Warm orange-red (#DD5423)\n- Background: Dark variations of the primary hue\n- Text: Light cream with orange undertones\n- Cards: Dark brown gradients with orange accents\n\n## Configuration\n\nThe application automatically detects the deployment environment:\n- **Development**: Standard localhost configuration\n- **Production**: GitHub Pages configuration with `/DashTrack/` base path\n\nEnvironment-specific settings are managed in `client/src/config/env.ts`.","size_bytes":2845},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a comprehensive personal dashboard application built with React and Express that helps users track and manage various aspects of their daily life. The app provides a centralized view for music listening, todos, project management, habit tracking, fitness activities, daily scheduling, meal planning, budget tracking, and calendar integration. It's designed as a modern web application with a dark theme and responsive design using shadcn/ui components.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React 18 with TypeScript for type safety\n- **UI Library**: shadcn/ui components built on Radix UI primitives for accessibility\n- **Styling**: Tailwind CSS with custom dark theme variables and gradients\n- **State Management**: TanStack Query (React Query) for server state management\n- **Routing**: Wouter for lightweight client-side routing\n- **Build Tool**: Vite for fast development and optimized production builds\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules for modern JavaScript features\n- **Database Layer**: Drizzle ORM with PostgreSQL for type-safe database operations\n- **API Design**: RESTful endpoints following standard HTTP conventions\n- **Development Setup**: Hot reload with Vite middleware integration\n- **Storage Interface**: Abstract storage layer allowing for easy database switching\n\n## Database Design\n- **ORM**: Drizzle for type-safe SQL queries and schema management\n- **Schema**: Comprehensive data models for users, music entries, todos, projects, habits, workouts, schedule items, and meals\n- **Validation**: Zod schemas for runtime type validation on both client and server\n- **Migrations**: Drizzle Kit for database schema versioning and deployment\n\n## Component Architecture\n- **Design System**: Modular widget-based dashboard with consistent styling patterns\n- **Accessibility**: Full ARIA support through Radix UI components\n- **Responsive Design**: Mobile-first approach with breakpoint-aware layouts\n- **Error Handling**: Toast notifications for user feedback and error reporting\n- **Loading States**: Skeleton components and loading indicators for better UX\n\n## Development Workflow\n- **Type Safety**: Shared TypeScript schemas between frontend and backend\n- **Code Organization**: Clear separation between client, server, and shared code\n- **Path Aliases**: Configured import paths for cleaner code organization\n- **Hot Reload**: Development environment with instant feedback\n\n# External Dependencies\n\n## Database Services\n- **Neon Database**: Serverless PostgreSQL database for production deployment\n- **Drizzle ORM**: Type-safe database operations and schema management\n\n## UI and Styling\n- **Radix UI**: Headless component primitives for accessibility and behavior\n- **Tailwind CSS**: Utility-first CSS framework for styling\n- **Lucide React**: Icon library for consistent iconography\n- **Class Variance Authority**: Utility for managing component variants\n\n## Development Tools\n- **Vite**: Build tool and development server\n- **TanStack Query**: Server state management and caching\n- **Zod**: Schema validation library\n- **TypeScript**: Static type checking\n- **PostCSS**: CSS processing with Autoprefixer\n\n## Planned Integrations\n- **Calendar Integration**: iCal API support for calendar events\n- **Budget Tracking**: Copilot API integration for financial data\n- **RSS Feeds**: External RSS feed aggregation\n- **Reading Progress**: Goodreads or similar book tracking services\n\n## Runtime Environment\n- **Replit**: Cloud-based development and deployment platform\n- **Node.js**: JavaScript runtime for server-side execution\n- **Express.js**: Web application framework for API endpoints","size_bytes":3813},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        // Dashboard specific colors\n        'dashboard-amber': 'var(--amber-400)',\n        'dashboard-purple': 'var(--purple-400)',\n        'dashboard-green': 'var(--green-400)',\n        'dashboard-blue': 'var(--blue-400)',\n        'dashboard-orange': 'var(--orange-400)',\n        'dashboard-indigo': 'var(--indigo-400)',\n        'dashboard-orange-500': 'var(--orange-500)',\n        'dashboard-emerald': 'var(--emerald-400)',\n        'dashboard-teal': 'var(--teal-400)',\n        'dashboard-cyan': 'var(--cyan-400)',\n        'dashboard-red': 'var(--red-400)',\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3315},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"â€¦\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { \n  insertMusicEntrySchema,\n  insertTodoItemSchema, \n  insertProjectSchema,\n  insertHabitSchema,\n  insertWorkoutSchema,\n  insertScheduleItemSchema,\n  insertMealSchema\n} from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  const httpServer = createServer(app);\n  const userId = \"default-user-id\"; // Using default user for simplicity\n\n  // Music routes\n  app.get(\"/api/music\", async (req, res) => {\n    try {\n      const entries = await storage.getMusicEntries(userId);\n      res.json(entries);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch music entries\" });\n    }\n  });\n\n  app.post(\"/api/music\", async (req, res) => {\n    try {\n      const validatedData = insertMusicEntrySchema.parse(req.body);\n      const entry = await storage.createMusicEntry({ ...validatedData, userId });\n      res.json(entry);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid music entry data\" });\n    }\n  });\n\n  app.delete(\"/api/music/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteMusicEntry(req.params.id, userId);\n      if (success) {\n        res.json({ message: \"Music entry deleted\" });\n      } else {\n        res.status(404).json({ message: \"Music entry not found\" });\n      }\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete music entry\" });\n    }\n  });\n\n  // Todo routes\n  app.get(\"/api/todos\", async (req, res) => {\n    try {\n      const items = await storage.getTodoItems(userId);\n      res.json(items);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch todo items\" });\n    }\n  });\n\n  app.post(\"/api/todos\", async (req, res) => {\n    try {\n      const validatedData = insertTodoItemSchema.parse(req.body);\n      const item = await storage.createTodoItem({ ...validatedData, userId });\n      res.json(item);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid todo item data\" });\n    }\n  });\n\n  app.patch(\"/api/todos/:id\", async (req, res) => {\n    try {\n      const updates = insertTodoItemSchema.partial().parse(req.body);\n      const item = await storage.updateTodoItem(req.params.id, updates, userId);\n      if (item) {\n        res.json(item);\n      } else {\n        res.status(404).json({ message: \"Todo item not found\" });\n      }\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid update data\" });\n    }\n  });\n\n  app.delete(\"/api/todos/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteTodoItem(req.params.id, userId);\n      if (success) {\n        res.json({ message: \"Todo item deleted\" });\n      } else {\n        res.status(404).json({ message: \"Todo item not found\" });\n      }\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete todo item\" });\n    }\n  });\n\n  // Project routes\n  app.get(\"/api/projects\", async (req, res) => {\n    try {\n      const projects = await storage.getProjects(userId);\n      res.json(projects);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch projects\" });\n    }\n  });\n\n  app.post(\"/api/projects\", async (req, res) => {\n    try {\n      const validatedData = insertProjectSchema.parse(req.body);\n      const project = await storage.createProject({ ...validatedData, userId });\n      res.json(project);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid project data\" });\n    }\n  });\n\n  app.patch(\"/api/projects/:id\", async (req, res) => {\n    try {\n      const updates = insertProjectSchema.partial().parse(req.body);\n      const project = await storage.updateProject(req.params.id, updates, userId);\n      if (project) {\n        res.json(project);\n      } else {\n        res.status(404).json({ message: \"Project not found\" });\n      }\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid update data\" });\n    }\n  });\n\n  app.delete(\"/api/projects/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteProject(req.params.id, userId);\n      if (success) {\n        res.json({ message: \"Project deleted\" });\n      } else {\n        res.status(404).json({ message: \"Project not found\" });\n      }\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete project\" });\n    }\n  });\n\n  // Habit routes\n  app.get(\"/api/habits\", async (req, res) => {\n    try {\n      const habits = await storage.getHabits(userId);\n      res.json(habits);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch habits\" });\n    }\n  });\n\n  app.post(\"/api/habits\", async (req, res) => {\n    try {\n      const validatedData = insertHabitSchema.parse(req.body);\n      const habit = await storage.createHabit({ ...validatedData, userId });\n      res.json(habit);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid habit data\" });\n    }\n  });\n\n  app.patch(\"/api/habits/:id\", async (req, res) => {\n    try {\n      const updates = insertHabitSchema.partial().parse(req.body);\n      const habit = await storage.updateHabit(req.params.id, updates, userId);\n      if (habit) {\n        res.json(habit);\n      } else {\n        res.status(404).json({ message: \"Habit not found\" });\n      }\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid update data\" });\n    }\n  });\n\n  app.delete(\"/api/habits/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteHabit(req.params.id, userId);\n      if (success) {\n        res.json({ message: \"Habit deleted\" });\n      } else {\n        res.status(404).json({ message: \"Habit not found\" });\n      }\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete habit\" });\n    }\n  });\n\n  // Workout routes\n  app.get(\"/api/workouts\", async (req, res) => {\n    try {\n      const workouts = await storage.getWorkouts(userId);\n      res.json(workouts);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch workouts\" });\n    }\n  });\n\n  app.post(\"/api/workouts\", async (req, res) => {\n    try {\n      const validatedData = insertWorkoutSchema.parse(req.body);\n      const workout = await storage.createWorkout({ ...validatedData, userId });\n      res.json(workout);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid workout data\" });\n    }\n  });\n\n  app.delete(\"/api/workouts/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteWorkout(req.params.id, userId);\n      if (success) {\n        res.json({ message: \"Workout deleted\" });\n      } else {\n        res.status(404).json({ message: \"Workout not found\" });\n      }\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete workout\" });\n    }\n  });\n\n  // Schedule routes\n  app.get(\"/api/schedule\", async (req, res) => {\n    try {\n      const date = req.query.date as string || new Date().toISOString().split('T')[0];\n      const items = await storage.getScheduleItems(userId, date);\n      res.json(items);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch schedule items\" });\n    }\n  });\n\n  app.post(\"/api/schedule\", async (req, res) => {\n    try {\n      const validatedData = insertScheduleItemSchema.parse(req.body);\n      const item = await storage.createScheduleItem({ ...validatedData, userId });\n      res.json(item);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid schedule item data\" });\n    }\n  });\n\n  app.delete(\"/api/schedule/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteScheduleItem(req.params.id, userId);\n      if (success) {\n        res.json({ message: \"Schedule item deleted\" });\n      } else {\n        res.status(404).json({ message: \"Schedule item not found\" });\n      }\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete schedule item\" });\n    }\n  });\n\n  // Meal routes\n  app.get(\"/api/meals\", async (req, res) => {\n    try {\n      const meals = await storage.getMeals(userId);\n      res.json(meals);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch meals\" });\n    }\n  });\n\n  app.post(\"/api/meals\", async (req, res) => {\n    try {\n      const validatedData = insertMealSchema.parse(req.body);\n      const meal = await storage.createMeal({ ...validatedData, userId });\n      res.json(meal);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid meal data\" });\n    }\n  });\n\n  app.delete(\"/api/meals/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteMeal(req.params.id, userId);\n      if (success) {\n        res.json({ message: \"Meal deleted\" });\n      } else {\n        res.status(404).json({ message: \"Meal not found\" });\n      }\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete meal\" });\n    }\n  });\n\n  return httpServer;\n}\n","size_bytes":8920},"server/storage.ts":{"content":"import { \n  type User, \n  type InsertUser, \n  type MusicEntry, \n  type InsertMusicEntry,\n  type TodoItem,\n  type InsertTodoItem,\n  type Project,\n  type InsertProject,\n  type Habit,\n  type InsertHabit,\n  type Workout,\n  type InsertWorkout,\n  type ScheduleItem,\n  type InsertScheduleItem,\n  type Meal,\n  type InsertMeal\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n\n  // Music operations\n  getMusicEntries(userId: string): Promise<MusicEntry[]>;\n  createMusicEntry(entry: InsertMusicEntry & { userId: string }): Promise<MusicEntry>;\n  deleteMusicEntry(id: string, userId: string): Promise<boolean>;\n\n  // Todo operations\n  getTodoItems(userId: string): Promise<TodoItem[]>;\n  createTodoItem(item: InsertTodoItem & { userId: string }): Promise<TodoItem>;\n  updateTodoItem(id: string, updates: Partial<InsertTodoItem>, userId: string): Promise<TodoItem | undefined>;\n  deleteTodoItem(id: string, userId: string): Promise<boolean>;\n\n  // Project operations\n  getProjects(userId: string): Promise<Project[]>;\n  createProject(project: InsertProject & { userId: string }): Promise<Project>;\n  updateProject(id: string, updates: Partial<InsertProject>, userId: string): Promise<Project | undefined>;\n  deleteProject(id: string, userId: string): Promise<boolean>;\n\n  // Habit operations\n  getHabits(userId: string): Promise<Habit[]>;\n  createHabit(habit: InsertHabit & { userId: string }): Promise<Habit>;\n  updateHabit(id: string, updates: Partial<InsertHabit>, userId: string): Promise<Habit | undefined>;\n  deleteHabit(id: string, userId: string): Promise<boolean>;\n\n  // Workout operations\n  getWorkouts(userId: string): Promise<Workout[]>;\n  createWorkout(workout: InsertWorkout & { userId: string }): Promise<Workout>;\n  deleteWorkout(id: string, userId: string): Promise<boolean>;\n\n  // Schedule operations\n  getScheduleItems(userId: string, date: string): Promise<ScheduleItem[]>;\n  createScheduleItem(item: InsertScheduleItem & { userId: string }): Promise<ScheduleItem>;\n  deleteScheduleItem(id: string, userId: string): Promise<boolean>;\n\n  // Meal operations\n  getMeals(userId: string): Promise<Meal[]>;\n  createMeal(meal: InsertMeal & { userId: string }): Promise<Meal>;\n  deleteMeal(id: string, userId: string): Promise<boolean>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private musicEntries: Map<string, MusicEntry>;\n  private todoItems: Map<string, TodoItem>;\n  private projects: Map<string, Project>;\n  private habits: Map<string, Habit>;\n  private workouts: Map<string, Workout>;\n  private scheduleItems: Map<string, ScheduleItem>;\n  private meals: Map<string, Meal>;\n\n  constructor() {\n    this.users = new Map();\n    this.musicEntries = new Map();\n    this.todoItems = new Map();\n    this.projects = new Map();\n    this.habits = new Map();\n    this.workouts = new Map();\n    this.scheduleItems = new Map();\n    this.meals = new Map();\n\n    // Create a default user for demo purposes\n    const defaultUser: User = {\n      id: \"default-user-id\",\n      username: \"Alex\",\n      password: \"password\"\n    };\n    this.users.set(defaultUser.id, defaultUser);\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n\n  // Music operations\n  async getMusicEntries(userId: string): Promise<MusicEntry[]> {\n    return Array.from(this.musicEntries.values())\n      .filter(entry => entry.userId === userId)\n      .sort((a, b) => new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime());\n  }\n\n  async createMusicEntry(entry: InsertMusicEntry & { userId: string }): Promise<MusicEntry> {\n    const id = randomUUID();\n    const musicEntry: MusicEntry = {\n      ...entry,\n      id,\n      createdAt: new Date(),\n    };\n    this.musicEntries.set(id, musicEntry);\n    return musicEntry;\n  }\n\n  async deleteMusicEntry(id: string, userId: string): Promise<boolean> {\n    const entry = this.musicEntries.get(id);\n    if (entry && entry.userId === userId) {\n      return this.musicEntries.delete(id);\n    }\n    return false;\n  }\n\n  // Todo operations\n  async getTodoItems(userId: string): Promise<TodoItem[]> {\n    return Array.from(this.todoItems.values())\n      .filter(item => item.userId === userId)\n      .sort((a, b) => new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime());\n  }\n\n  async createTodoItem(item: InsertTodoItem & { userId: string }): Promise<TodoItem> {\n    const id = randomUUID();\n    const todoItem: TodoItem = {\n      ...item,\n      id,\n      createdAt: new Date(),\n    };\n    this.todoItems.set(id, todoItem);\n    return todoItem;\n  }\n\n  async updateTodoItem(id: string, updates: Partial<InsertTodoItem>, userId: string): Promise<TodoItem | undefined> {\n    const item = this.todoItems.get(id);\n    if (item && item.userId === userId) {\n      const updatedItem = { ...item, ...updates };\n      this.todoItems.set(id, updatedItem);\n      return updatedItem;\n    }\n    return undefined;\n  }\n\n  async deleteTodoItem(id: string, userId: string): Promise<boolean> {\n    const item = this.todoItems.get(id);\n    if (item && item.userId === userId) {\n      return this.todoItems.delete(id);\n    }\n    return false;\n  }\n\n  // Project operations\n  async getProjects(userId: string): Promise<Project[]> {\n    return Array.from(this.projects.values())\n      .filter(project => project.userId === userId)\n      .sort((a, b) => new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime());\n  }\n\n  async createProject(project: InsertProject & { userId: string }): Promise<Project> {\n    const id = randomUUID();\n    const newProject: Project = {\n      ...project,\n      id,\n      createdAt: new Date(),\n    };\n    this.projects.set(id, newProject);\n    return newProject;\n  }\n\n  async updateProject(id: string, updates: Partial<InsertProject>, userId: string): Promise<Project | undefined> {\n    const project = this.projects.get(id);\n    if (project && project.userId === userId) {\n      const updatedProject = { ...project, ...updates };\n      this.projects.set(id, updatedProject);\n      return updatedProject;\n    }\n    return undefined;\n  }\n\n  async deleteProject(id: string, userId: string): Promise<boolean> {\n    const project = this.projects.get(id);\n    if (project && project.userId === userId) {\n      return this.projects.delete(id);\n    }\n    return false;\n  }\n\n  // Habit operations\n  async getHabits(userId: string): Promise<Habit[]> {\n    return Array.from(this.habits.values())\n      .filter(habit => habit.userId === userId)\n      .sort((a, b) => new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime());\n  }\n\n  async createHabit(habit: InsertHabit & { userId: string }): Promise<Habit> {\n    const id = randomUUID();\n    const newHabit: Habit = {\n      ...habit,\n      id,\n      createdAt: new Date(),\n    };\n    this.habits.set(id, newHabit);\n    return newHabit;\n  }\n\n  async updateHabit(id: string, updates: Partial<InsertHabit>, userId: string): Promise<Habit | undefined> {\n    const habit = this.habits.get(id);\n    if (habit && habit.userId === userId) {\n      const updatedHabit = { ...habit, ...updates };\n      this.habits.set(id, updatedHabit);\n      return updatedHabit;\n    }\n    return undefined;\n  }\n\n  async deleteHabit(id: string, userId: string): Promise<boolean> {\n    const habit = this.habits.get(id);\n    if (habit && habit.userId === userId) {\n      return this.habits.delete(id);\n    }\n    return false;\n  }\n\n  // Workout operations\n  async getWorkouts(userId: string): Promise<Workout[]> {\n    return Array.from(this.workouts.values())\n      .filter(workout => workout.userId === userId)\n      .sort((a, b) => new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime());\n  }\n\n  async createWorkout(workout: InsertWorkout & { userId: string }): Promise<Workout> {\n    const id = randomUUID();\n    const newWorkout: Workout = {\n      ...workout,\n      id,\n      createdAt: new Date(),\n    };\n    this.workouts.set(id, newWorkout);\n    return newWorkout;\n  }\n\n  async deleteWorkout(id: string, userId: string): Promise<boolean> {\n    const workout = this.workouts.get(id);\n    if (workout && workout.userId === userId) {\n      return this.workouts.delete(id);\n    }\n    return false;\n  }\n\n  // Schedule operations\n  async getScheduleItems(userId: string, date: string): Promise<ScheduleItem[]> {\n    return Array.from(this.scheduleItems.values())\n      .filter(item => item.userId === userId && item.date === date)\n      .sort((a, b) => a.time.localeCompare(b.time));\n  }\n\n  async createScheduleItem(item: InsertScheduleItem & { userId: string }): Promise<ScheduleItem> {\n    const id = randomUUID();\n    const scheduleItem: ScheduleItem = {\n      ...item,\n      id,\n      createdAt: new Date(),\n    };\n    this.scheduleItems.set(id, scheduleItem);\n    return scheduleItem;\n  }\n\n  async deleteScheduleItem(id: string, userId: string): Promise<boolean> {\n    const item = this.scheduleItems.get(id);\n    if (item && item.userId === userId) {\n      return this.scheduleItems.delete(id);\n    }\n    return false;\n  }\n\n  // Meal operations\n  async getMeals(userId: string): Promise<Meal[]> {\n    return Array.from(this.meals.values())\n      .filter(meal => meal.userId === userId)\n      .sort((a, b) => a.dayOfWeek - b.dayOfWeek);\n  }\n\n  async createMeal(meal: InsertMeal & { userId: string }): Promise<Meal> {\n    const id = randomUUID();\n    const newMeal: Meal = {\n      ...meal,\n      id,\n      createdAt: new Date(),\n    };\n    this.meals.set(id, newMeal);\n    return newMeal;\n  }\n\n  async deleteMeal(id: string, userId: string): Promise<boolean> {\n    const meal = this.meals.get(id);\n    if (meal && meal.userId === userId) {\n      return this.meals.delete(id);\n    }\n    return false;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":10351},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, boolean, timestamp, json, date } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const musicEntries = pgTable(\"music_entries\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  artist: text(\"artist\").notNull(),\n  album: text(\"album\").notNull(),\n  rating: integer(\"rating\").notNull(), // 1-5 stars\n  listenedDate: date(\"listened_date\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const todoItems = pgTable(\"todo_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  text: text(\"text\").notNull(),\n  completed: boolean(\"completed\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const projects = pgTable(\"projects\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  status: text(\"status\").notNull().default(\"planning\"), // planning, in-progress, completed\n  progress: integer(\"progress\").default(0), // 0-100\n  deadline: date(\"deadline\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const habits = pgTable(\"habits\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  name: text(\"name\").notNull(),\n  streak: integer(\"streak\").default(0),\n  weekProgress: json(\"week_progress\").$type<boolean[]>().default([false, false, false, false, false, false, false]),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const workouts = pgTable(\"workouts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  type: text(\"type\").notNull(),\n  duration: integer(\"duration\").notNull(), // minutes\n  calories: integer(\"calories\"),\n  workoutDate: date(\"workout_date\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const scheduleItems = pgTable(\"schedule_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  time: text(\"time\").notNull(), // HH:mm format\n  activity: text(\"activity\").notNull(),\n  duration: integer(\"duration\").notNull(), // minutes\n  date: date(\"date\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const meals = pgTable(\"meals\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  dayOfWeek: integer(\"day_of_week\").notNull(), // 0-6 (Sunday-Saturday)\n  mealType: text(\"meal_type\").notNull(), // breakfast, lunch, dinner\n  name: text(\"name\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport const insertMusicEntrySchema = createInsertSchema(musicEntries).omit({\n  id: true,\n  userId: true,\n  createdAt: true,\n});\n\nexport const insertTodoItemSchema = createInsertSchema(todoItems).omit({\n  id: true,\n  userId: true,\n  createdAt: true,\n});\n\nexport const insertProjectSchema = createInsertSchema(projects).omit({\n  id: true,\n  userId: true,\n  createdAt: true,\n});\n\nexport const insertHabitSchema = createInsertSchema(habits).omit({\n  id: true,\n  userId: true,\n  createdAt: true,\n});\n\nexport const insertWorkoutSchema = createInsertSchema(workouts).omit({\n  id: true,\n  userId: true,\n  createdAt: true,\n});\n\nexport const insertScheduleItemSchema = createInsertSchema(scheduleItems).omit({\n  id: true,\n  userId: true,\n  createdAt: true,\n});\n\nexport const insertMealSchema = createInsertSchema(meals).omit({\n  id: true,\n  userId: true,\n  createdAt: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\nexport type InsertMusicEntry = z.infer<typeof insertMusicEntrySchema>;\nexport type MusicEntry = typeof musicEntries.$inferSelect;\n\nexport type InsertTodoItem = z.infer<typeof insertTodoItemSchema>;\nexport type TodoItem = typeof todoItems.$inferSelect;\n\nexport type InsertProject = z.infer<typeof insertProjectSchema>;\nexport type Project = typeof projects.$inferSelect;\n\nexport type InsertHabit = z.infer<typeof insertHabitSchema>;\nexport type Habit = typeof habits.$inferSelect;\n\nexport type InsertWorkout = z.infer<typeof insertWorkoutSchema>;\nexport type Workout = typeof workouts.$inferSelect;\n\nexport type InsertScheduleItem = z.infer<typeof insertScheduleItemSchema>;\nexport type ScheduleItem = typeof scheduleItems.$inferSelect;\n\nexport type InsertMeal = z.infer<typeof insertMealSchema>;\nexport type Meal = typeof meals.$inferSelect;\n","size_bytes":5005},"client/src/App.tsx":{"content":"import { Switch, Route, Router } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { config } from \"@/config/env\";\nimport NotFound from \"@/pages/not-found\";\nimport Dashboard from \"@/pages/dashboard\";\n\nfunction AppRouter() {\n  return (\n    <Router base={config.basePath}>\n      <Switch>\n        <Route path=\"/\" component={Dashboard} />\n        <Route component={NotFound} />\n      </Switch>\n    </Router>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <div className=\"dark\">\n          <Toaster />\n          <AppRouter />\n        </div>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":875},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(13, 45%, 6%);\n  --foreground: hsl(13, 75%, 51%);\n  --card: hsl(13, 35%, 12%);\n  --card-foreground: hsl(13, 75%, 51%);\n  --popover: hsl(13, 35%, 12%);\n  --popover-foreground: hsl(13, 75%, 51%);\n  --primary: hsl(13, 75%, 51%);\n  --primary-foreground: hsl(13, 45%, 95%);\n  --secondary: hsl(13, 20%, 15%);\n  --secondary-foreground: hsl(13, 75%, 51%);\n  --muted: hsl(13, 20%, 15%);\n  --muted-foreground: hsl(13, 30%, 65%);\n  --accent: hsl(13, 20%, 15%);\n  --accent-foreground: hsl(13, 75%, 51%);\n  --destructive: hsl(0, 70%, 45%);\n  --destructive-foreground: hsl(13, 45%, 95%);\n  --border: hsl(13, 25%, 20%);\n  --input: hsl(13, 25%, 20%);\n  --ring: hsl(13, 75%, 51%);\n  --chart-1: hsl(13, 75%, 51%);\n  --chart-2: hsl(120, 65%, 45%);\n  --chart-3: hsl(45, 95%, 65%);\n  --chart-4: hsl(100, 70%, 50%);\n  --chart-5: hsl(350, 75%, 60%);\n  --sidebar: hsl(13, 35%, 12%);\n  --sidebar-foreground: hsl(13, 75%, 51%);\n  --sidebar-primary: hsl(13, 75%, 51%);\n  --sidebar-primary-foreground: hsl(13, 45%, 95%);\n  --sidebar-accent: hsl(13, 20%, 15%);\n  --sidebar-accent-foreground: hsl(13, 75%, 51%);\n  --sidebar-border: hsl(13, 25%, 20%);\n  --sidebar-ring: hsl(13, 75%, 51%);\n  --font-sans: Inter, system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.75rem;\n  \n  /* Dashboard specific colors */\n  --widget-bg: linear-gradient(145deg, hsl(13, 40%, 10%) 0%, hsl(13, 45%, 14%) 100%);\n  --widget-border: hsla(13, 75%, 51%, 0.2);\n  --widget-hover-border: hsla(13, 75%, 51%, 0.7);\n  --amber-400: hsl(45, 96%, 64%);\n  --purple-400: hsl(280, 70%, 70%);\n  --green-400: hsl(120, 65%, 65%);\n  --blue-400: hsl(200, 80%, 65%);\n  --orange-400: hsl(13, 75%, 51%);\n  --indigo-400: hsl(250, 60%, 68%);\n  --orange-500: hsl(13, 75%, 51%);\n  --emerald-400: hsl(150, 70%, 60%);\n  --teal-400: hsl(170, 70%, 55%);\n  --cyan-400: hsl(185, 75%, 60%);\n  --red-400: hsl(13, 75%, 51%);\n}\n\n.dark {\n  --background: hsl(13, 45%, 6%);\n  --foreground: hsl(13, 75%, 51%);\n  --card: hsl(13, 35%, 12%);\n  --card-foreground: hsl(13, 75%, 51%);\n  --popover: hsl(13, 35%, 12%);\n  --popover-foreground: hsl(13, 75%, 51%);\n  --primary: hsl(13, 75%, 51%);\n  --primary-foreground: hsl(13, 45%, 95%);\n  --secondary: hsl(13, 20%, 15%);\n  --secondary-foreground: hsl(13, 75%, 51%);\n  --muted: hsl(13, 20%, 15%);\n  --muted-foreground: hsl(13, 30%, 65%);\n  --accent: hsl(13, 20%, 15%);\n  --accent-foreground: hsl(13, 75%, 51%);\n  --destructive: hsl(0, 70%, 45%);\n  --destructive-foreground: hsl(13, 45%, 95%);\n  --border: hsl(13, 25%, 20%);\n  --input: hsl(13, 25%, 20%);\n  --ring: hsl(13, 75%, 51%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n  \n  html {\n    font-family: Inter, system-ui, sans-serif;\n  }\n}\n\n@layer utilities {\n  .widget-card {\n    background: var(--widget-bg);\n    border: 1px solid var(--widget-border);\n    transition: all 0.3s ease;\n  }\n  \n  .widget-card:hover {\n    border-color: var(--widget-hover-border);\n    box-shadow: 0 10px 40px rgba(59, 130, 246, 0.1);\n    transform: translateY(-2px);\n  }\n  \n  .progress-ring {\n    transition: stroke-dasharray 0.3s ease-in-out;\n  }\n  \n  .habit-dot {\n    width: 12px;\n    height: 12px;\n    border-radius: 50%;\n    transition: all 0.2s ease;\n  }\n  \n  .habit-dot.completed {\n    background-color: var(--green-400);\n  }\n  \n  .habit-dot.missed {\n    background-color: var(--red-400);\n  }\n  \n  .habit-dot.pending {\n    background-color: hsl(240, 5%, 65%);\n  }\n  \n  .scrollbar-thin {\n    scrollbar-width: thin;\n    scrollbar-color: hsla(0, 0%, 100%, 0.2) transparent;\n  }\n  \n  .scrollbar-thin::-webkit-scrollbar {\n    width: 6px;\n  }\n  \n  .scrollbar-thin::-webkit-scrollbar-track {\n    background: transparent;\n  }\n  \n  .scrollbar-thin::-webkit-scrollbar-thumb {\n    background-color: hsla(0, 0%, 100%, 0.2);\n    border-radius: 3px;\n  }\n  \n  .animate-fade-in {\n    animation: fadeIn 0.5s ease-in-out;\n  }\n  \n  .animate-slide-up {\n    animation: slideUp 0.3s ease-out;\n  }\n  \n  .animate-pulse-slow {\n    animation: pulse 3s infinite;\n  }\n}\n\n@keyframes fadeIn {\n  from { opacity: 0; }\n  to { opacity: 1; }\n}\n\n@keyframes slideUp {\n  from { transform: translateY(20px); opacity: 0; }\n  to { transform: translateY(0); opacity: 1; }\n}\n","size_bytes":4445},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/config/env.ts":{"content":"// Environment configuration for different deployment targets\nexport const config = {\n  // Base path for GitHub Pages deployment\n  basePath: import.meta.env.VITE_BASE_PATH || (import.meta.env.PROD ? '/DashTrack' : ''),\n  \n  // App URL\n  appUrl: import.meta.env.PROD \n    ? 'https://michaelajenkins05-dot.github.io/DashTrack' \n    : 'http://localhost:5000',\n};","size_bytes":359},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/clientStorage.ts":{"content":"import { \n  type MusicEntry, \n  type InsertMusicEntry,\n  type TodoItem,\n  type InsertTodoItem,\n  type Project,\n  type InsertProject,\n  type Habit,\n  type InsertHabit,\n  type Workout,\n  type InsertWorkout,\n  type ScheduleItem,\n  type InsertScheduleItem,\n  type Meal,\n  type InsertMeal\n} from \"@shared/schema\";\n\nfunction generateId(): string {\n  return Date.now().toString(36) + Math.random().toString(36).substr(2);\n}\n\nclass ClientStorage {\n  private readonly userId = \"default-user-id\";\n\n  // Music operations\n  getMusicEntries(): MusicEntry[] {\n    const stored = localStorage.getItem('music-entries');\n    if (!stored) return [];\n    return JSON.parse(stored);\n  }\n\n  createMusicEntry(entry: InsertMusicEntry): MusicEntry {\n    const entries = this.getMusicEntries();\n    const newEntry: MusicEntry = {\n      ...entry,\n      id: generateId(),\n      userId: this.userId,\n      createdAt: new Date(),\n    };\n    entries.push(newEntry);\n    localStorage.setItem('music-entries', JSON.stringify(entries));\n    return newEntry;\n  }\n\n  deleteMusicEntry(id: string): boolean {\n    const entries = this.getMusicEntries();\n    const filtered = entries.filter(entry => entry.id !== id);\n    localStorage.setItem('music-entries', JSON.stringify(filtered));\n    return filtered.length < entries.length;\n  }\n\n  // Todo operations\n  getTodoItems(): TodoItem[] {\n    const stored = localStorage.getItem('todo-items');\n    if (!stored) return [];\n    return JSON.parse(stored);\n  }\n\n  createTodoItem(item: InsertTodoItem): TodoItem {\n    const items = this.getTodoItems();\n    const newItem: TodoItem = {\n      ...item,\n      id: generateId(),\n      userId: this.userId,\n      createdAt: new Date(),\n      completed: item.completed ?? null,\n    };\n    items.push(newItem);\n    localStorage.setItem('todo-items', JSON.stringify(items));\n    return newItem;\n  }\n\n  updateTodoItem(id: string, updates: Partial<InsertTodoItem>): TodoItem | null {\n    const items = this.getTodoItems();\n    const itemIndex = items.findIndex(item => item.id === id);\n    if (itemIndex === -1) return null;\n    \n    items[itemIndex] = { ...items[itemIndex], ...updates };\n    localStorage.setItem('todo-items', JSON.stringify(items));\n    return items[itemIndex];\n  }\n\n  deleteTodoItem(id: string): boolean {\n    const items = this.getTodoItems();\n    const filtered = items.filter(item => item.id !== id);\n    localStorage.setItem('todo-items', JSON.stringify(filtered));\n    return filtered.length < items.length;\n  }\n\n  // Project operations\n  getProjects(): Project[] {\n    const stored = localStorage.getItem('projects');\n    if (!stored) return [];\n    return JSON.parse(stored);\n  }\n\n  createProject(project: InsertProject): Project {\n    const projects = this.getProjects();\n    const newProject: Project = {\n      ...project,\n      id: generateId(),\n      userId: this.userId,\n      createdAt: new Date(),\n      progress: project.progress ?? null,\n      status: project.status ?? 'active',\n      description: project.description ?? null,\n      deadline: project.deadline ?? null,\n    };\n    projects.push(newProject);\n    localStorage.setItem('projects', JSON.stringify(projects));\n    return newProject;\n  }\n\n  updateProject(id: string, updates: Partial<InsertProject>): Project | null {\n    const projects = this.getProjects();\n    const projectIndex = projects.findIndex(project => project.id === id);\n    if (projectIndex === -1) return null;\n    \n    projects[projectIndex] = { ...projects[projectIndex], ...updates };\n    localStorage.setItem('projects', JSON.stringify(projects));\n    return projects[projectIndex];\n  }\n\n  deleteProject(id: string): boolean {\n    const projects = this.getProjects();\n    const filtered = projects.filter(project => project.id !== id);\n    localStorage.setItem('projects', JSON.stringify(filtered));\n    return filtered.length < projects.length;\n  }\n\n  // Habit operations\n  getHabits(): Habit[] {\n    const stored = localStorage.getItem('habits');\n    if (!stored) return [];\n    return JSON.parse(stored);\n  }\n\n  createHabit(habit: InsertHabit): Habit {\n    const habits = this.getHabits();\n    const newHabit: Habit = {\n      ...habit,\n      id: generateId(),\n      userId: this.userId,\n      createdAt: new Date(),\n      streak: habit.streak ?? null,\n      weekProgress: habit.weekProgress ? Array.from(habit.weekProgress) as boolean[] : null,\n    };\n    habits.push(newHabit);\n    localStorage.setItem('habits', JSON.stringify(habits));\n    return newHabit;\n  }\n\n  updateHabit(id: string, updates: Partial<InsertHabit>): Habit | null {\n    const habits = this.getHabits();\n    const habitIndex = habits.findIndex(habit => habit.id === id);\n    if (habitIndex === -1) return null;\n    \n    habits[habitIndex] = { \n      ...habits[habitIndex], \n      ...updates,\n      weekProgress: updates.weekProgress ? Array.from(updates.weekProgress) as boolean[] : habits[habitIndex].weekProgress\n    };\n    localStorage.setItem('habits', JSON.stringify(habits));\n    return habits[habitIndex];\n  }\n\n  deleteHabit(id: string): boolean {\n    const habits = this.getHabits();\n    const filtered = habits.filter(habit => habit.id !== id);\n    localStorage.setItem('habits', JSON.stringify(filtered));\n    return filtered.length < habits.length;\n  }\n\n  // Workout operations\n  getWorkouts(): Workout[] {\n    const stored = localStorage.getItem('workouts');\n    if (!stored) return [];\n    return JSON.parse(stored);\n  }\n\n  createWorkout(workout: InsertWorkout): Workout {\n    const workouts = this.getWorkouts();\n    const newWorkout: Workout = {\n      ...workout,\n      id: generateId(),\n      userId: this.userId,\n      createdAt: new Date(),\n      calories: workout.calories ?? null,\n    };\n    workouts.push(newWorkout);\n    localStorage.setItem('workouts', JSON.stringify(workouts));\n    return newWorkout;\n  }\n\n  deleteWorkout(id: string): boolean {\n    const workouts = this.getWorkouts();\n    const filtered = workouts.filter(workout => workout.id !== id);\n    localStorage.setItem('workouts', JSON.stringify(filtered));\n    return filtered.length < workouts.length;\n  }\n\n  // Schedule operations\n  getScheduleItems(date: string): ScheduleItem[] {\n    const stored = localStorage.getItem('schedule-items');\n    if (!stored) return [];\n    const items = JSON.parse(stored);\n    return items.filter((item: ScheduleItem) => item.date === date);\n  }\n\n  createScheduleItem(item: InsertScheduleItem): ScheduleItem {\n    const stored = localStorage.getItem('schedule-items');\n    const items = stored ? JSON.parse(stored) : [];\n    const newItem: ScheduleItem = {\n      ...item,\n      id: generateId(),\n      userId: this.userId,\n      createdAt: new Date(),\n    };\n    items.push(newItem);\n    localStorage.setItem('schedule-items', JSON.stringify(items));\n    return newItem;\n  }\n\n  deleteScheduleItem(id: string): boolean {\n    const stored = localStorage.getItem('schedule-items');\n    if (!stored) return false;\n    const items = JSON.parse(stored);\n    const filtered = items.filter((item: ScheduleItem) => item.id !== id);\n    localStorage.setItem('schedule-items', JSON.stringify(filtered));\n    return filtered.length < items.length;\n  }\n\n  // Meal operations\n  getMeals(): Meal[] {\n    const stored = localStorage.getItem('meals');\n    if (!stored) return [];\n    return JSON.parse(stored);\n  }\n\n  createMeal(meal: InsertMeal): Meal {\n    const meals = this.getMeals();\n    const newMeal: Meal = {\n      ...meal,\n      id: generateId(),\n      userId: this.userId,\n      createdAt: new Date(),\n    };\n    meals.push(newMeal);\n    localStorage.setItem('meals', JSON.stringify(meals));\n    return newMeal;\n  }\n\n  deleteMeal(id: string): boolean {\n    const meals = this.getMeals();\n    const filtered = meals.filter(meal => meal.id !== id);\n    localStorage.setItem('meals', JSON.stringify(filtered));\n    return filtered.length < meals.length;\n  }\n}\n\nexport const clientStorage = new ClientStorage();","size_bytes":7909},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\nimport { clientStorage } from \"./clientStorage\";\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<any> {\n  // Handle client-side mutations\n  switch (method) {\n    case 'POST':\n      if (url === \"/api/music\") {\n        return clientStorage.createMusicEntry(data as any);\n      } else if (url === \"/api/todos\") {\n        return clientStorage.createTodoItem(data as any);\n      } else if (url === \"/api/projects\") {\n        return clientStorage.createProject(data as any);\n      } else if (url === \"/api/habits\") {\n        return clientStorage.createHabit(data as any);\n      } else if (url === \"/api/workouts\") {\n        return clientStorage.createWorkout(data as any);\n      } else if (url === \"/api/schedule\") {\n        return clientStorage.createScheduleItem(data as any);\n      } else if (url === \"/api/meals\") {\n        return clientStorage.createMeal(data as any);\n      }\n      break;\n      \n    case 'PATCH':\n      const idFromUrl = url.split('/').pop();\n      if (url.includes('/api/todos/')) {\n        return clientStorage.updateTodoItem(idFromUrl!, data as any);\n      } else if (url.includes('/api/projects/')) {\n        return clientStorage.updateProject(idFromUrl!, data as any);\n      } else if (url.includes('/api/habits/')) {\n        return clientStorage.updateHabit(idFromUrl!, data as any);\n      }\n      break;\n      \n    case 'DELETE':\n      const deleteId = url.split('/').pop();\n      if (url.includes('/api/music/')) {\n        clientStorage.deleteMusicEntry(deleteId!);\n      } else if (url.includes('/api/todos/')) {\n        clientStorage.deleteTodoItem(deleteId!);\n      } else if (url.includes('/api/projects/')) {\n        clientStorage.deleteProject(deleteId!);\n      } else if (url.includes('/api/habits/')) {\n        clientStorage.deleteHabit(deleteId!);\n      } else if (url.includes('/api/workouts/')) {\n        clientStorage.deleteWorkout(deleteId!);\n      } else if (url.includes('/api/schedule/')) {\n        clientStorage.deleteScheduleItem(deleteId!);\n      } else if (url.includes('/api/meals/')) {\n        clientStorage.deleteMeal(deleteId!);\n      }\n      return { message: \"Deleted successfully\" };\n      \n    default:\n      throw new Error(`Unsupported method: ${method}`);\n  }\n\n  throw new Error(`Unknown endpoint: ${url}`);\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const url = queryKey.join(\"/\") as string;\n    \n    // Handle client-side data fetching\n    switch (url) {\n      case \"/api/music\":\n        return clientStorage.getMusicEntries();\n      case \"/api/todos\":\n        return clientStorage.getTodoItems();\n      case \"/api/projects\":\n        return clientStorage.getProjects();\n      case \"/api/habits\":\n        return clientStorage.getHabits();\n      case \"/api/workouts\":\n        return clientStorage.getWorkouts();\n      case \"/api/meals\":\n        return clientStorage.getMeals();\n      default:\n        if (url.startsWith(\"/api/schedule\")) {\n          const urlParts = url.split('?');\n          const urlParams = urlParts[1] ? new URLSearchParams(urlParts[1]) : new URLSearchParams();\n          const date = urlParams.get('date') || new Date().toISOString().split('T')[0];\n          return clientStorage.getScheduleItems(date);\n        }\n        throw new Error(`Unknown endpoint: ${url}`);\n    }\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});","size_bytes":3863},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/dashboard.tsx":{"content":"import { Header } from \"@/components/dashboard/header\";\nimport { DashboardGrid } from \"@/components/dashboard/dashboard-grid\";\n\nexport default function Dashboard() {\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-slate-900 to-slate-800\">\n      <Header />\n      <main className=\"container mx-auto px-6 py-8\">\n        <DashboardGrid />\n      </main>\n    </div>\n  );\n}\n","size_bytes":401},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/dashboard/dashboard-grid.tsx":{"content":"import { ReadingProgressWidget } from \"./widgets/reading-progress-widget\";\nimport { MusicTrackingWidget } from \"./widgets/music-tracking-widget\";\nimport { TodoWidget } from \"./widgets/todo-widget\";\nimport { CalendarWidget } from \"./widgets/calendar-widget\";\nimport { MealPlanningWidget } from \"./widgets/meal-planning-widget\";\nimport { ProjectManagementWidget } from \"./widgets/project-management-widget\";\nimport { RSSFeedWidget } from \"./widgets/rss-feed-widget\";\nimport { BudgetTrackerWidget } from \"./widgets/budget-tracker-widget\";\nimport { DailyScheduleWidget } from \"./widgets/daily-schedule-widget\";\nimport { HabitTrackerWidget } from \"./widgets/habit-tracker-widget\";\nimport { FitnessTrackerWidget } from \"./widgets/fitness-tracker-widget\";\n\nexport function DashboardGrid() {\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6 auto-rows-fr\">\n      <ReadingProgressWidget />\n      <MusicTrackingWidget />\n      <TodoWidget />\n      <CalendarWidget />\n      <div className=\"col-span-1 md:col-span-2\">\n        <MealPlanningWidget />\n      </div>\n      <ProjectManagementWidget />\n      <RSSFeedWidget />\n      <BudgetTrackerWidget />\n      <DailyScheduleWidget />\n      <HabitTrackerWidget />\n      <FitnessTrackerWidget />\n    </div>\n  );\n}\n","size_bytes":1295},"client/src/components/dashboard/header.tsx":{"content":"import { Bell, Settings, Gauge } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\nexport function Header() {\n  return (\n    <header className=\"sticky top-0 z-50 bg-background/80 backdrop-blur-md border-b border-white/10\">\n      <div className=\"container mx-auto px-6 py-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"w-10 h-10 bg-gradient-to-r from-primary to-blue-600 rounded-xl flex items-center justify-center\">\n              <Gauge className=\"text-white text-lg\" size={20} />\n            </div>\n            <div>\n              <h1 className=\"text-xl font-semibold text-white\">Personal Dashboard</h1>\n              <p className=\"text-sm text-gray-400\">Welcome back, <span>Alex</span></p>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-4\">\n            <Button \n              variant=\"ghost\" \n              size=\"icon\"\n              className=\"text-gray-400 hover:text-white hover:bg-white/10\"\n              data-testid=\"button-notifications\"\n            >\n              <Bell size={18} />\n            </Button>\n            <Button \n              variant=\"ghost\" \n              size=\"icon\"\n              className=\"text-gray-400 hover:text-white hover:bg-white/10\"\n              data-testid=\"button-settings\"\n            >\n              <Settings size={18} />\n            </Button>\n            <div className=\"w-8 h-8 bg-gradient-to-r from-green-400 to-blue-500 rounded-full\"></div>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":1625},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/dashboard/modals/add-habit-modal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface AddHabitModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function AddHabitModal({ isOpen, onClose }: AddHabitModalProps) {\n  const [name, setName] = useState(\"\");\n\n  const { toast } = useToast();\n\n  const addHabitMutation = useMutation({\n    mutationFn: async (name: string) => {\n      await apiRequest(\"POST\", \"/api/habits\", {\n        name,\n        streak: 0,\n        weekProgress: [false, false, false, false, false, false, false]\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/habits\"] });\n      toast({\n        title: \"Habit added\",\n        description: \"Your new habit has been added to the tracker.\",\n      });\n      onClose();\n      setName(\"\");\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to add habit. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (name.trim()) {\n      addHabitMutation.mutate(name.trim());\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-md bg-card border-border\">\n        <DialogHeader>\n          <DialogTitle className=\"text-white\">Add Habit</DialogTitle>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"habitName\" className=\"text-white\">Habit Name</Label>\n            <Input\n              id=\"habitName\"\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n              placeholder=\"e.g., Exercise daily, Read 30 minutes\"\n              className=\"bg-input border-border text-white\"\n              data-testid=\"input-habit-name\"\n              required\n              autoFocus\n            />\n          </div>\n          \n          <div className=\"flex justify-end space-x-2 pt-4\">\n            <Button\n              type=\"button\"\n              variant=\"ghost\"\n              onClick={onClose}\n              className=\"text-white hover:bg-white/10\"\n              data-testid=\"button-cancel-habit\"\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              className=\"bg-primary hover:bg-primary/90 text-white\"\n              disabled={addHabitMutation.isPending || !name.trim()}\n              data-testid=\"button-save-habit\"\n            >\n              {addHabitMutation.isPending ? \"Adding...\" : \"Add Habit\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":3064},"client/src/components/dashboard/modals/add-music-modal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Star } from \"lucide-react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface AddMusicModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function AddMusicModal({ isOpen, onClose }: AddMusicModalProps) {\n  const [formData, setFormData] = useState({\n    artist: \"\",\n    album: \"\",\n    rating: 0,\n    listenedDate: new Date().toISOString().split('T')[0]\n  });\n\n  const { toast } = useToast();\n\n  const addMusicMutation = useMutation({\n    mutationFn: async (data: typeof formData) => {\n      await apiRequest(\"POST\", \"/api/music\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/music\"] });\n      toast({\n        title: \"Music entry added\",\n        description: \"Your music listening has been logged successfully.\",\n      });\n      onClose();\n      setFormData({\n        artist: \"\",\n        album: \"\",\n        rating: 0,\n        listenedDate: new Date().toISOString().split('T')[0]\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to add music entry. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (formData.artist && formData.album && formData.rating > 0) {\n      addMusicMutation.mutate(formData);\n    }\n  };\n\n  const setRating = (rating: number) => {\n    setFormData(prev => ({ ...prev, rating }));\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-md bg-card border-border\">\n        <DialogHeader>\n          <DialogTitle className=\"text-white\">Add Music Entry</DialogTitle>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"artist\" className=\"text-white\">Artist</Label>\n            <Input\n              id=\"artist\"\n              value={formData.artist}\n              onChange={(e) => setFormData(prev => ({ ...prev, artist: e.target.value }))}\n              placeholder=\"Enter artist name\"\n              className=\"bg-input border-border text-white\"\n              data-testid=\"input-artist\"\n              required\n            />\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Label htmlFor=\"album\" className=\"text-white\">Album</Label>\n            <Input\n              id=\"album\"\n              value={formData.album}\n              onChange={(e) => setFormData(prev => ({ ...prev, album: e.target.value }))}\n              placeholder=\"Enter album name\"\n              className=\"bg-input border-border text-white\"\n              data-testid=\"input-album\"\n              required\n            />\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Label className=\"text-white\">Rating</Label>\n            <div className=\"flex items-center space-x-1\">\n              {Array.from({ length: 5 }).map((_, i) => (\n                <button\n                  key={i}\n                  type=\"button\"\n                  onClick={() => setRating(i + 1)}\n                  className=\"p-1 hover:scale-110 transition-transform\"\n                  data-testid={`rating-star-${i + 1}`}\n                >\n                  <Star\n                    size={24}\n                    className={i < formData.rating ? \"text-yellow-400 fill-yellow-400\" : \"text-gray-600\"}\n                  />\n                </button>\n              ))}\n            </div>\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Label htmlFor=\"listenedDate\" className=\"text-white\">Date Listened</Label>\n            <Input\n              id=\"listenedDate\"\n              type=\"date\"\n              value={formData.listenedDate}\n              onChange={(e) => setFormData(prev => ({ ...prev, listenedDate: e.target.value }))}\n              className=\"bg-input border-border text-white\"\n              data-testid=\"input-listened-date\"\n              required\n            />\n          </div>\n          \n          <div className=\"flex justify-end space-x-2 pt-4\">\n            <Button\n              type=\"button\"\n              variant=\"ghost\"\n              onClick={onClose}\n              className=\"text-white hover:bg-white/10\"\n              data-testid=\"button-cancel-music\"\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              className=\"bg-primary hover:bg-primary/90 text-white\"\n              disabled={addMusicMutation.isPending || !formData.artist || !formData.album || formData.rating === 0}\n              data-testid=\"button-save-music\"\n            >\n              {addMusicMutation.isPending ? \"Adding...\" : \"Add Music\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":5207},"client/src/components/dashboard/modals/add-project-modal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface AddProjectModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function AddProjectModal({ isOpen, onClose }: AddProjectModalProps) {\n  const [formData, setFormData] = useState({\n    name: \"\",\n    description: \"\",\n    status: \"planning\",\n    progress: 0,\n    deadline: \"\"\n  });\n\n  const { toast } = useToast();\n\n  const addProjectMutation = useMutation({\n    mutationFn: async (data: typeof formData) => {\n      const submitData = {\n        ...data,\n        deadline: data.deadline || undefined\n      };\n      await apiRequest(\"POST\", \"/api/projects\", submitData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/projects\"] });\n      toast({\n        title: \"Project added\",\n        description: \"Your project has been created successfully.\",\n      });\n      onClose();\n      setFormData({\n        name: \"\",\n        description: \"\",\n        status: \"planning\",\n        progress: 0,\n        deadline: \"\"\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to add project. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (formData.name) {\n      addProjectMutation.mutate(formData);\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-md bg-card border-border\">\n        <DialogHeader>\n          <DialogTitle className=\"text-white\">Add Project</DialogTitle>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"projectName\" className=\"text-white\">Project Name</Label>\n            <Input\n              id=\"projectName\"\n              value={formData.name}\n              onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n              placeholder=\"Enter project name\"\n              className=\"bg-input border-border text-white\"\n              data-testid=\"input-project-name\"\n              required\n            />\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Label htmlFor=\"projectDescription\" className=\"text-white\">Description (Optional)</Label>\n            <Textarea\n              id=\"projectDescription\"\n              value={formData.description}\n              onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n              placeholder=\"Enter project description\"\n              className=\"bg-input border-border text-white resize-none\"\n              rows={3}\n              data-testid=\"input-project-description\"\n            />\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Label className=\"text-white\">Status</Label>\n            <Select\n              value={formData.status}\n              onValueChange={(value) => setFormData(prev => ({ ...prev, status: value }))}\n            >\n              <SelectTrigger className=\"bg-input border-border text-white\" data-testid=\"select-project-status\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent className=\"bg-card border-border\">\n                <SelectItem value=\"planning\" className=\"text-white hover:bg-white/10\">Planning</SelectItem>\n                <SelectItem value=\"in-progress\" className=\"text-white hover:bg-white/10\">In Progress</SelectItem>\n                <SelectItem value=\"completed\" className=\"text-white hover:bg-white/10\">Completed</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Label htmlFor=\"projectDeadline\" className=\"text-white\">Deadline (Optional)</Label>\n            <Input\n              id=\"projectDeadline\"\n              type=\"date\"\n              value={formData.deadline}\n              onChange={(e) => setFormData(prev => ({ ...prev, deadline: e.target.value }))}\n              className=\"bg-input border-border text-white\"\n              data-testid=\"input-project-deadline\"\n            />\n          </div>\n          \n          <div className=\"flex justify-end space-x-2 pt-4\">\n            <Button\n              type=\"button\"\n              variant=\"ghost\"\n              onClick={onClose}\n              className=\"text-white hover:bg-white/10\"\n              data-testid=\"button-cancel-project\"\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              className=\"bg-primary hover:bg-primary/90 text-white\"\n              disabled={addProjectMutation.isPending || !formData.name}\n              data-testid=\"button-save-project\"\n            >\n              {addProjectMutation.isPending ? \"Adding...\" : \"Add Project\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":5484},"client/src/components/dashboard/modals/add-todo-modal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface AddTodoModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function AddTodoModal({ isOpen, onClose }: AddTodoModalProps) {\n  const [text, setText] = useState(\"\");\n\n  const { toast } = useToast();\n\n  const addTodoMutation = useMutation({\n    mutationFn: async (text: string) => {\n      await apiRequest(\"POST\", \"/api/todos\", { text, completed: false });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/todos\"] });\n      toast({\n        title: \"Todo added\",\n        description: \"Your task has been added to the list.\",\n      });\n      onClose();\n      setText(\"\");\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to add todo. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (text.trim()) {\n      addTodoMutation.mutate(text.trim());\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-md bg-card border-border\">\n        <DialogHeader>\n          <DialogTitle className=\"text-white\">Add Todo</DialogTitle>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"todoText\" className=\"text-white\">Task</Label>\n            <Input\n              id=\"todoText\"\n              value={text}\n              onChange={(e) => setText(e.target.value)}\n              placeholder=\"Enter your task\"\n              className=\"bg-input border-border text-white\"\n              data-testid=\"input-todo-text\"\n              required\n              autoFocus\n            />\n          </div>\n          \n          <div className=\"flex justify-end space-x-2 pt-4\">\n            <Button\n              type=\"button\"\n              variant=\"ghost\"\n              onClick={onClose}\n              className=\"text-white hover:bg-white/10\"\n              data-testid=\"button-cancel-todo\"\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              className=\"bg-primary hover:bg-primary/90 text-white\"\n              disabled={addTodoMutation.isPending || !text.trim()}\n              data-testid=\"button-save-todo\"\n            >\n              {addTodoMutation.isPending ? \"Adding...\" : \"Add Todo\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":2922},"client/src/components/dashboard/modals/add-workout-modal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface AddWorkoutModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function AddWorkoutModal({ isOpen, onClose }: AddWorkoutModalProps) {\n  const [formData, setFormData] = useState({\n    type: \"\",\n    duration: \"\",\n    calories: \"\",\n    workoutDate: new Date().toISOString().split('T')[0]\n  });\n\n  const { toast } = useToast();\n\n  const addWorkoutMutation = useMutation({\n    mutationFn: async (data: typeof formData) => {\n      const submitData = {\n        type: data.type,\n        duration: parseInt(data.duration),\n        calories: data.calories ? parseInt(data.calories) : undefined,\n        workoutDate: data.workoutDate\n      };\n      await apiRequest(\"POST\", \"/api/workouts\", submitData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/workouts\"] });\n      toast({\n        title: \"Workout logged\",\n        description: \"Your workout has been added successfully.\",\n      });\n      onClose();\n      setFormData({\n        type: \"\",\n        duration: \"\",\n        calories: \"\",\n        workoutDate: new Date().toISOString().split('T')[0]\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to add workout. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (formData.type && formData.duration) {\n      addWorkoutMutation.mutate(formData);\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-md bg-card border-border\">\n        <DialogHeader>\n          <DialogTitle className=\"text-white\">Add Workout</DialogTitle>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"workoutType\" className=\"text-white\">Workout Type</Label>\n            <Input\n              id=\"workoutType\"\n              value={formData.type}\n              onChange={(e) => setFormData(prev => ({ ...prev, type: e.target.value }))}\n              placeholder=\"e.g., Cardio, Strength Training, Yoga\"\n              className=\"bg-input border-border text-white\"\n              data-testid=\"input-workout-type\"\n              required\n            />\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Label htmlFor=\"workoutDuration\" className=\"text-white\">Duration (minutes)</Label>\n            <Input\n              id=\"workoutDuration\"\n              type=\"number\"\n              value={formData.duration}\n              onChange={(e) => setFormData(prev => ({ ...prev, duration: e.target.value }))}\n              placeholder=\"30\"\n              className=\"bg-input border-border text-white\"\n              data-testid=\"input-workout-duration\"\n              min=\"1\"\n              required\n            />\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Label htmlFor=\"workoutCalories\" className=\"text-white\">Calories Burned (Optional)</Label>\n            <Input\n              id=\"workoutCalories\"\n              type=\"number\"\n              value={formData.calories}\n              onChange={(e) => setFormData(prev => ({ ...prev, calories: e.target.value }))}\n              placeholder=\"300\"\n              className=\"bg-input border-border text-white\"\n              data-testid=\"input-workout-calories\"\n              min=\"0\"\n            />\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Label htmlFor=\"workoutDate\" className=\"text-white\">Workout Date</Label>\n            <Input\n              id=\"workoutDate\"\n              type=\"date\"\n              value={formData.workoutDate}\n              onChange={(e) => setFormData(prev => ({ ...prev, workoutDate: e.target.value }))}\n              className=\"bg-input border-border text-white\"\n              data-testid=\"input-workout-date\"\n              required\n            />\n          </div>\n          \n          <div className=\"flex justify-end space-x-2 pt-4\">\n            <Button\n              type=\"button\"\n              variant=\"ghost\"\n              onClick={onClose}\n              className=\"text-white hover:bg-white/10\"\n              data-testid=\"button-cancel-workout\"\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              className=\"bg-primary hover:bg-primary/90 text-white\"\n              disabled={addWorkoutMutation.isPending || !formData.type || !formData.duration}\n              data-testid=\"button-save-workout\"\n            >\n              {addWorkoutMutation.isPending ? \"Adding...\" : \"Add Workout\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":5182},"client/src/components/dashboard/widgets/budget-tracker-widget.tsx":{"content":"import { Wallet } from \"lucide-react\";\nimport { Card } from \"@/components/ui/card\";\n\nexport function BudgetTrackerWidget() {\n  // Mock budget data - in real app this would connect to Copilot API\n  const budgetData = {\n    remaining: 2347,\n    categories: [\n      { name: \"Food & Dining\", spent: 420, budget: 500, color: \"from-dashboard-emerald to-green-400\" },\n      { name: \"Transportation\", spent: 180, budget: 300, color: \"from-dashboard-blue to-cyan-400\" },\n      { name: \"Entertainment\", spent: 95, budget: 200, color: \"from-dashboard-purple to-pink-400\" }\n    ]\n  };\n\n  return (\n    <Card className=\"widget-card rounded-2xl p-6 animate-fade-in\" data-testid=\"widget-budget-tracker\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <h3 className=\"text-lg font-semibold text-white flex items-center\">\n          <Wallet className=\"text-dashboard-emerald mr-2\" size={20} />\n          Budget\n        </h3>\n        <span className=\"text-xs text-gray-400 bg-dashboard-emerald/20 px-2 py-1 rounded-full\">Copilot</span>\n      </div>\n      \n      <div className=\"space-y-4\">\n        <div className=\"text-center\">\n          <p className=\"text-2xl font-bold text-dashboard-emerald\" data-testid=\"text-budget-remaining\">\n            ${budgetData.remaining.toLocaleString()}\n          </p>\n          <p className=\"text-sm text-gray-400\">Remaining this month</p>\n        </div>\n        \n        <div className=\"space-y-3\">\n          {budgetData.categories.map((category, index) => (\n            <div key={index} className=\"bg-white/5 rounded-lg p-3\" data-testid={`budget-category-${index}`}>\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className=\"text-sm text-white\">{category.name}</span>\n                <span className=\"text-sm text-gray-400\">\n                  ${category.spent} / ${category.budget}\n                </span>\n              </div>\n              <div className=\"w-full bg-gray-700 rounded-full h-2\">\n                <div \n                  className={`bg-gradient-to-r ${category.color} h-2 rounded-full transition-all duration-300`}\n                  style={{ width: `${(category.spent / category.budget) * 100}%` }}\n                />\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </Card>\n  );\n}\n","size_bytes":2316},"client/src/components/dashboard/widgets/calendar-widget.tsx":{"content":"import { Calendar } from \"lucide-react\";\nimport { Card } from \"@/components/ui/card\";\n\nexport function CalendarWidget() {\n  // Mock data - in real app this would connect to iCal API\n  const currentDate = new Date();\n  const todayEvents = [\n    {\n      id: \"1\",\n      title: \"Team Meeting\",\n      time: \"10:00 AM - 11:00 AM\",\n      color: \"bg-dashboard-blue\"\n    },\n    {\n      id: \"2\",\n      title: \"Doctor Appointment\", \n      time: \"2:30 PM - 3:30 PM\",\n      color: \"bg-dashboard-red\"\n    }\n  ];\n\n  return (\n    <Card className=\"widget-card rounded-2xl p-6 animate-fade-in\" data-testid=\"widget-calendar\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <h3 className=\"text-lg font-semibold text-white flex items-center\">\n          <Calendar className=\"text-dashboard-blue mr-2\" size={20} />\n          Calendar\n        </h3>\n        <span className=\"text-xs text-gray-400 bg-dashboard-blue/20 px-2 py-1 rounded-full\">iCal</span>\n      </div>\n      \n      <div className=\"space-y-3\">\n        <div className=\"text-center\">\n          <p className=\"text-2xl font-bold text-white\" data-testid=\"text-current-date\">\n            {currentDate.getDate()}\n          </p>\n          <p className=\"text-sm text-gray-400\" data-testid=\"text-current-month\">\n            {currentDate.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}\n          </p>\n        </div>\n        \n        <div className=\"space-y-2 max-h-32 overflow-y-auto scrollbar-thin\">\n          {todayEvents.length === 0 ? (\n            <div className=\"text-center text-gray-400 py-4 text-sm\">\n              No events today\n            </div>\n          ) : (\n            todayEvents.map((event) => (\n              <div \n                key={event.id}\n                className=\"bg-white/5 rounded-lg p-3\"\n                data-testid={`calendar-event-${event.id}`}\n              >\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1\">\n                    <p className=\"font-medium text-white text-sm\">{event.title}</p>\n                    <p className=\"text-xs text-gray-400\">{event.time}</p>\n                  </div>\n                  <div className={`w-3 h-3 ${event.color} rounded-full flex-shrink-0 mt-1`}></div>\n                </div>\n              </div>\n            ))\n          )}\n        </div>\n      </div>\n    </Card>\n  );\n}\n","size_bytes":2376},"client/src/components/dashboard/widgets/daily-schedule-widget.tsx":{"content":"import { Clock, Plus } from \"lucide-react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { ScheduleItem } from \"@shared/schema\";\n\nexport function DailyScheduleWidget() {\n  const today = new Date().toISOString().split('T')[0];\n  \n  const { data: scheduleItems = [], isLoading } = useQuery<ScheduleItem[]>({\n    queryKey: [\"/api/schedule\", { date: today }],\n  });\n\n  const getActivityColor = (index: number) => {\n    const colors = [\n      'bg-dashboard-teal',\n      'bg-dashboard-blue', \n      'bg-dashboard-green',\n      'bg-dashboard-purple',\n      'bg-dashboard-orange',\n      'bg-dashboard-red'\n    ];\n    return colors[index % colors.length];\n  };\n\n  return (\n    <Card className=\"widget-card rounded-2xl p-6 animate-fade-in\" data-testid=\"widget-daily-schedule\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <h3 className=\"text-lg font-semibold text-white flex items-center\">\n          <Clock className=\"text-dashboard-teal mr-2\" size={20} />\n          Daily Schedule\n        </h3>\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          className=\"text-dashboard-teal hover:text-teal-300\"\n          data-testid=\"button-add-schedule-item\"\n        >\n          <Plus size={18} />\n        </Button>\n      </div>\n      \n      <div className=\"space-y-2 max-h-48 overflow-y-auto scrollbar-thin\">\n        {isLoading ? (\n          <div className=\"text-center text-gray-400 py-4\">Loading...</div>\n        ) : scheduleItems.length === 0 ? (\n          <div className=\"text-center text-gray-400 py-4\">\n            No activities scheduled for today\n          </div>\n        ) : (\n          scheduleItems.map((item, index) => (\n            <div \n              key={item.id}\n              className=\"flex items-center space-x-3 p-2 hover:bg-white/5 rounded-lg transition-colors\"\n              data-testid={`schedule-item-${item.id}`}\n            >\n              <div className=\"w-12 text-xs text-dashboard-teal font-mono\">\n                {item.time}\n              </div>\n              <div className=\"flex-1\">\n                <p className=\"text-sm text-white\">{item.activity}</p>\n                <p className=\"text-xs text-gray-400\">{item.duration} min</p>\n              </div>\n              <div className={`w-2 h-2 ${getActivityColor(index)} rounded-full`}></div>\n            </div>\n          ))\n        )}\n      </div>\n    </Card>\n  );\n}\n","size_bytes":2486},"client/src/components/dashboard/widgets/fitness-tracker-widget.tsx":{"content":"import { Dumbbell, Plus } from \"lucide-react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { AddWorkoutModal } from \"../modals/add-workout-modal\";\nimport type { Workout } from \"@shared/schema\";\n\nexport function FitnessTrackerWidget() {\n  const [isAddModalOpen, setIsAddModalOpen] = useState(false);\n\n  const { data: workouts = [], isLoading } = useQuery<Workout[]>({\n    queryKey: [\"/api/workouts\"],\n  });\n\n  // Calculate fitness stats\n  const today = new Date().toISOString().split('T')[0];\n  const todayWorkouts = workouts.filter(w => w.workoutDate === today);\n  const totalSteps = 8347; // Mock data - would come from fitness API\n  const totalCalories = todayWorkouts.reduce((sum, w) => sum + (w.calories || 0), 0) + 420; // Base calories\n\n  // Weekly workout goal\n  const thisWeek = new Date();\n  const startOfWeek = new Date(thisWeek.setDate(thisWeek.getDate() - thisWeek.getDay() + 1));\n  const weekWorkouts = workouts.filter(w => new Date(w.workoutDate) >= startOfWeek);\n  const weeklyGoal = 5;\n  const weeklyProgress = (weekWorkouts.length / weeklyGoal) * 100;\n\n  return (\n    <>\n      <Card className=\"widget-card rounded-2xl p-6 animate-fade-in\" data-testid=\"widget-fitness-tracker\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-lg font-semibold text-white flex items-center\">\n            <Dumbbell className=\"text-dashboard-red mr-2\" size={20} />\n            Fitness\n          </h3>\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            className=\"text-dashboard-red hover:text-red-300\"\n            onClick={() => setIsAddModalOpen(true)}\n            data-testid=\"button-add-workout\"\n          >\n            <Plus size={18} />\n          </Button>\n        </div>\n        \n        <div className=\"space-y-4\">\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"text-center\">\n              <p className=\"text-lg font-bold text-dashboard-red\" data-testid=\"text-steps-today\">\n                {totalSteps.toLocaleString()}\n              </p>\n              <p className=\"text-xs text-gray-400\">Steps today</p>\n            </div>\n            <div className=\"text-center\">\n              <p className=\"text-lg font-bold text-dashboard-orange\" data-testid=\"text-calories-burned\">\n                {totalCalories}\n              </p>\n              <p className=\"text-xs text-gray-400\">Calories burned</p>\n            </div>\n          </div>\n          \n          <div className=\"space-y-3\">\n            {isLoading ? (\n              <div className=\"text-center text-gray-400 py-2\">Loading workouts...</div>\n            ) : workouts.slice(0, 2).map((workout) => (\n              <div \n                key={workout.id}\n                className=\"bg-white/5 rounded-lg p-3\"\n                data-testid={`workout-${workout.id}`}\n              >\n                <div className=\"flex items-center justify-between mb-1\">\n                  <span className=\"text-sm text-white font-medium\">{workout.type}</span>\n                  <span className=\"text-xs text-gray-400\">\n                    {new Date(workout.workoutDate).toLocaleDateString() === today ? 'Today' : \n                     new Date(workout.workoutDate).toLocaleDateString()}\n                  </span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-xs text-gray-400\">{workout.duration} min</span>\n                  <span className=\"text-xs text-dashboard-red\">{workout.calories || 0} cal</span>\n                </div>\n              </div>\n            ))}\n            \n            {workouts.length === 0 && !isLoading && (\n              <div className=\"text-center text-gray-400 py-2 text-sm\">\n                No workouts logged yet\n              </div>\n            )}\n          </div>\n          \n          <div className=\"bg-white/5 rounded-lg p-3\">\n            <div className=\"flex items-center justify-between mb-2\">\n              <span className=\"text-sm text-white\">Weekly Goal</span>\n              <span className=\"text-sm text-gray-400\" data-testid=\"text-weekly-progress\">\n                {weekWorkouts.length}/{weeklyGoal} workouts\n              </span>\n            </div>\n            <div className=\"w-full bg-gray-700 rounded-full h-2\">\n              <div \n                className=\"bg-gradient-to-r from-dashboard-red to-pink-400 h-2 rounded-full transition-all duration-300\"\n                style={{ width: `${Math.min(weeklyProgress, 100)}%` }}\n              />\n            </div>\n          </div>\n        </div>\n      </Card>\n\n      <AddWorkoutModal\n        isOpen={isAddModalOpen}\n        onClose={() => setIsAddModalOpen(false)}\n      />\n    </>\n  );\n}\n","size_bytes":4847},"client/src/components/dashboard/widgets/habit-tracker-widget.tsx":{"content":"import { CheckCircle, Plus } from \"lucide-react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { AddHabitModal } from \"../modals/add-habit-modal\";\nimport type { Habit } from \"@shared/schema\";\n\nexport function HabitTrackerWidget() {\n  const [isAddModalOpen, setIsAddModalOpen] = useState(false);\n\n  const { data: habits = [], isLoading } = useQuery<Habit[]>({\n    queryKey: [\"/api/habits\"],\n  });\n\n  const updateHabitMutation = useMutation({\n    mutationFn: async ({ id, weekProgress }: { id: string; weekProgress: boolean[] }) => {\n      await apiRequest(\"PATCH\", `/api/habits/${id}`, { weekProgress });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/habits\"] });\n    },\n  });\n\n  const toggleHabitDay = (habitId: string, dayIndex: number, currentProgress: boolean[]) => {\n    const newProgress = [...currentProgress];\n    newProgress[dayIndex] = !newProgress[dayIndex];\n    updateHabitMutation.mutate({ id: habitId, weekProgress: newProgress });\n  };\n\n  const getDotClass = (completed: boolean, dayIndex: number) => {\n    const today = new Date().getDay(); // 0 = Sunday, 1 = Monday, etc.\n    const adjustedToday = today === 0 ? 6 : today - 1; // Convert to 0-6 where 0 = Monday\n    \n    if (dayIndex < adjustedToday) {\n      return completed ? 'habit-dot completed' : 'habit-dot missed';\n    } else if (dayIndex === adjustedToday) {\n      return 'habit-dot pending';\n    } else {\n      return 'habit-dot pending';\n    }\n  };\n\n  return (\n    <>\n      <Card className=\"widget-card rounded-2xl p-6 animate-fade-in\" data-testid=\"widget-habit-tracker\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-lg font-semibold text-white flex items-center\">\n            <CheckCircle className=\"text-dashboard-cyan mr-2\" size={20} />\n            Habits\n          </h3>\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            className=\"text-dashboard-cyan hover:text-cyan-300\"\n            onClick={() => setIsAddModalOpen(true)}\n            data-testid=\"button-add-habit\"\n          >\n            <Plus size={18} />\n          </Button>\n        </div>\n        \n        <div className=\"space-y-4\">\n          {isLoading ? (\n            <div className=\"text-center text-gray-400 py-4\">Loading...</div>\n          ) : habits.length === 0 ? (\n            <div className=\"text-center text-gray-400 py-4\">\n              No habits yet. Add your first habit!\n            </div>\n          ) : (\n            habits.map((habit) => (\n              <div \n                key={habit.id}\n                className=\"bg-white/5 rounded-lg p-3\"\n                data-testid={`habit-${habit.id}`}\n              >\n                <div className=\"flex items-center justify-between mb-3\">\n                  <span className=\"text-sm text-white font-medium\">{habit.name}</span>\n                  <span className=\"text-xs text-dashboard-cyan\">\n                    {habit.streak || 0} day streak\n                  </span>\n                </div>\n                <div className=\"flex items-center space-x-1\">\n                  {(habit.weekProgress || [false, false, false, false, false, false, false]).map((completed, dayIndex) => (\n                    <button\n                      key={dayIndex}\n                      className={getDotClass(completed, dayIndex)}\n                      onClick={() => toggleHabitDay(habit.id, dayIndex, habit.weekProgress || [false, false, false, false, false, false, false])}\n                      title={`${['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'][dayIndex]}: ${completed ? 'Completed' : 'Not completed'}`}\n                      data-testid={`habit-dot-${habit.id}-${dayIndex}`}\n                    />\n                  ))}\n                </div>\n              </div>\n            ))\n          )}\n        </div>\n      </Card>\n\n      <AddHabitModal\n        isOpen={isAddModalOpen}\n        onClose={() => setIsAddModalOpen(false)}\n      />\n    </>\n  );\n}\n","size_bytes":4175},"client/src/components/dashboard/widgets/meal-planning-widget.tsx":{"content":"import { Utensils, Plus } from \"lucide-react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { Meal } from \"@shared/schema\";\n\nexport function MealPlanningWidget() {\n  const { data: meals = [], isLoading } = useQuery<Meal[]>({\n    queryKey: [\"/api/meals\"],\n  });\n\n  const weekDays = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\n  \n  // Group meals by day of week and meal type\n  const mealsByDay = weekDays.map((day, dayIndex) => {\n    const dayMeals = meals.filter(meal => meal.dayOfWeek === dayIndex + 1);\n    return {\n      day,\n      breakfast: dayMeals.find(m => m.mealType === 'breakfast')?.name || '',\n      lunch: dayMeals.find(m => m.mealType === 'lunch')?.name || '',\n      dinner: dayMeals.find(m => m.mealType === 'dinner')?.name || ''\n    };\n  });\n\n  return (\n    <Card className=\"widget-card rounded-2xl p-6 animate-fade-in\" data-testid=\"widget-meal-planning\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <h3 className=\"text-lg font-semibold text-white flex items-center\">\n          <Utensils className=\"text-dashboard-orange mr-2\" size={20} />\n          Meal Planning\n        </h3>\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          className=\"text-dashboard-orange hover:text-orange-300\"\n          data-testid=\"button-add-meal\"\n        >\n          <Plus size={18} />\n        </Button>\n      </div>\n      \n      <div className=\"grid grid-cols-7 gap-2\">\n        {mealsByDay.map((dayData, index) => (\n          <div key={index} className=\"text-center\" data-testid={`meal-day-${index}`}>\n            <p className=\"text-xs text-gray-400 mb-2\">{dayData.day}</p>\n            <div className=\"bg-white/5 rounded-lg p-2 min-h-16 hover:bg-white/10 transition-colors cursor-pointer\">\n              {dayData.breakfast && (\n                <p className=\"text-xs text-white font-medium mb-1 truncate\" title={dayData.breakfast}>\n                  {dayData.breakfast}\n                </p>\n              )}\n              {dayData.lunch && (\n                <p className=\"text-xs text-gray-400 truncate\" title={dayData.lunch}>\n                  {dayData.lunch}\n                </p>\n              )}\n              {dayData.dinner && (\n                <p className=\"text-xs text-gray-500 truncate\" title={dayData.dinner}>\n                  {dayData.dinner}\n                </p>\n              )}\n              {!dayData.breakfast && !dayData.lunch && !dayData.dinner && (\n                <div className=\"flex items-center justify-center h-full\">\n                  <Plus size={12} className=\"text-gray-600\" />\n                </div>\n              )}\n            </div>\n          </div>\n        ))}\n      </div>\n    </Card>\n  );\n}\n","size_bytes":2788},"client/src/components/dashboard/widgets/music-tracking-widget.tsx":{"content":"import { Music, Plus, Star, Trash2 } from \"lucide-react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { AddMusicModal } from \"../modals/add-music-modal\";\nimport type { MusicEntry } from \"@shared/schema\";\n\nexport function MusicTrackingWidget() {\n  const [isAddModalOpen, setIsAddModalOpen] = useState(false);\n\n  const { data: musicEntries = [], isLoading } = useQuery<MusicEntry[]>({\n    queryKey: [\"/api/music\"],\n  });\n\n  const deleteMusicMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"DELETE\", `/api/music/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/music\"] });\n    },\n  });\n\n  const renderStars = (rating: number) => {\n    return Array.from({ length: 5 }).map((_, i) => (\n      <Star\n        key={i}\n        size={12}\n        className={i < rating ? \"text-yellow-400 fill-yellow-400\" : \"text-gray-600\"}\n      />\n    ));\n  };\n\n  return (\n    <>\n      <Card className=\"widget-card rounded-2xl p-6 animate-fade-in\" data-testid=\"widget-music-tracking\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-lg font-semibold text-white flex items-center\">\n            <Music className=\"text-dashboard-purple mr-2\" size={20} />\n            Music Log\n          </h3>\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            className=\"text-dashboard-purple hover:text-purple-300\"\n            onClick={() => setIsAddModalOpen(true)}\n            data-testid=\"button-add-music\"\n          >\n            <Plus size={18} />\n          </Button>\n        </div>\n        \n        <div className=\"space-y-3 max-h-48 overflow-y-auto scrollbar-thin\">\n          {isLoading ? (\n            <div className=\"text-center text-gray-400 py-4\">Loading...</div>\n          ) : musicEntries.length === 0 ? (\n            <div className=\"text-center text-gray-400 py-4\">\n              No music entries yet. Add your first album!\n            </div>\n          ) : (\n            musicEntries.map((entry) => (\n              <div \n                key={entry.id} \n                className=\"bg-white/5 rounded-lg p-3 hover:bg-white/10 transition-colors group\"\n                data-testid={`music-entry-${entry.id}`}\n              >\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1 min-w-0\">\n                    <p className=\"font-medium text-white text-sm truncate\">\n                      {entry.album}\n                    </p>\n                    <p className=\"text-xs text-gray-400 truncate\">{entry.artist}</p>\n                    <p className=\"text-xs text-gray-500 mt-1\">\n                      {new Date(entry.listenedDate).toLocaleDateString()}\n                    </p>\n                  </div>\n                  <div className=\"flex items-center space-x-2 ml-2\">\n                    <div className=\"flex items-center\">\n                      {renderStars(entry.rating)}\n                    </div>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      className=\"text-red-400 hover:text-red-300 opacity-0 group-hover:opacity-100 transition-opacity h-6 w-6\"\n                      onClick={() => deleteMusicMutation.mutate(entry.id)}\n                      data-testid={`button-delete-music-${entry.id}`}\n                    >\n                      <Trash2 size={12} />\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            ))\n          )}\n        </div>\n      </Card>\n\n      <AddMusicModal\n        isOpen={isAddModalOpen}\n        onClose={() => setIsAddModalOpen(false)}\n      />\n    </>\n  );\n}\n","size_bytes":3930},"client/src/components/dashboard/widgets/project-management-widget.tsx":{"content":"import { FolderKanban, Plus } from \"lucide-react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { AddProjectModal } from \"../modals/add-project-modal\";\nimport type { Project } from \"@shared/schema\";\n\nexport function ProjectManagementWidget() {\n  const [isAddModalOpen, setIsAddModalOpen] = useState(false);\n\n  const { data: projects = [], isLoading } = useQuery<Project[]>({\n    queryKey: [\"/api/projects\"],\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return 'text-dashboard-green bg-dashboard-green/20';\n      case 'in-progress':\n        return 'text-dashboard-indigo bg-dashboard-indigo/20';\n      case 'planning':\n        return 'text-yellow-400 bg-yellow-400/20';\n      default:\n        return 'text-gray-400 bg-gray-400/20';\n    }\n  };\n\n  const getProgressColor = (progress: number) => {\n    if (progress >= 75) return 'from-dashboard-green to-emerald-400';\n    if (progress >= 50) return 'from-dashboard-indigo to-purple-400';\n    if (progress >= 25) return 'from-yellow-400 to-orange-400';\n    return 'from-gray-400 to-gray-500';\n  };\n\n  return (\n    <>\n      <Card className=\"widget-card rounded-2xl p-6 animate-fade-in\" data-testid=\"widget-project-management\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-lg font-semibold text-white flex items-center\">\n            <FolderKanban className=\"text-dashboard-indigo mr-2\" size={20} />\n            Projects\n          </h3>\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            className=\"text-dashboard-indigo hover:text-indigo-300\"\n            onClick={() => setIsAddModalOpen(true)}\n            data-testid=\"button-add-project\"\n          >\n            <Plus size={18} />\n          </Button>\n        </div>\n        \n        <div className=\"space-y-4\">\n          {isLoading ? (\n            <div className=\"text-center text-gray-400 py-4\">Loading...</div>\n          ) : projects.length === 0 ? (\n            <div className=\"text-center text-gray-400 py-4\">\n              No projects yet. Start your first project!\n            </div>\n          ) : (\n            projects.map((project) => (\n              <div \n                key={project.id}\n                className=\"bg-white/5 rounded-lg p-4 hover:bg-white/10 transition-colors\"\n                data-testid={`project-${project.id}`}\n              >\n                <div className=\"flex items-center justify-between mb-2\">\n                  <h4 className=\"font-medium text-white text-sm\">{project.name}</h4>\n                  <span className={`text-xs px-2 py-1 rounded-full capitalize ${getStatusColor(project.status)}`}>\n                    {project.status.replace('-', ' ')}\n                  </span>\n                </div>\n                {project.deadline && (\n                  <p className=\"text-xs text-gray-400 mb-3\">\n                    Due: {new Date(project.deadline).toLocaleDateString()}\n                  </p>\n                )}\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between text-xs\">\n                    <span className=\"text-gray-400\">Progress</span>\n                    <span className=\"text-white\">{project.progress || 0}%</span>\n                  </div>\n                  <div className=\"w-full bg-gray-700 rounded-full h-2\">\n                    <div \n                      className={`bg-gradient-to-r ${getProgressColor(project.progress || 0)} h-2 rounded-full transition-all duration-300`}\n                      style={{ width: `${project.progress || 0}%` }}\n                    />\n                  </div>\n                </div>\n              </div>\n            ))\n          )}\n        </div>\n      </Card>\n\n      <AddProjectModal\n        isOpen={isAddModalOpen}\n        onClose={() => setIsAddModalOpen(false)}\n      />\n    </>\n  );\n}\n","size_bytes":4001},"client/src/components/dashboard/widgets/reading-progress-widget.tsx":{"content":"import { Book } from \"lucide-react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\n\nexport function ReadingProgressWidget() {\n  // Mock data - in real app this would connect to Goodreads API\n  const readingProgress = {\n    currentBook: {\n      title: \"The Midnight Library\",\n      author: \"Matt Haig\",\n      progress: 60\n    },\n    yearlyGoal: {\n      target: 20,\n      completed: 12\n    }\n  };\n\n  const circumference = 283;\n  const strokeDashoffset = circumference - (readingProgress.currentBook.progress / 100) * circumference;\n\n  return (\n    <Card className=\"widget-card rounded-2xl p-6 animate-fade-in\" data-testid=\"widget-reading-progress\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <h3 className=\"text-lg font-semibold text-white flex items-center\">\n          <Book className=\"text-dashboard-amber mr-2\" size={20} />\n          Reading Progress\n        </h3>\n        <span className=\"text-xs text-gray-400 bg-dashboard-amber/20 px-2 py-1 rounded-full\">Goodreads</span>\n      </div>\n      \n      <div className=\"space-y-4\">\n        <div className=\"flex items-center justify-center\">\n          <div className=\"relative w-24 h-24\">\n            <svg className=\"w-24 h-24 transform -rotate-90\" viewBox=\"0 0 100 100\">\n              <circle \n                cx=\"50\" \n                cy=\"50\" \n                r=\"45\" \n                stroke=\"rgba(245, 158, 11, 0.2)\" \n                strokeWidth=\"8\" \n                fill=\"none\" \n              />\n              <circle \n                cx=\"50\" \n                cy=\"50\" \n                r=\"45\" \n                stroke=\"#f59e0b\" \n                strokeWidth=\"8\" \n                fill=\"none\"\n                strokeDasharray={circumference}\n                strokeDashoffset={strokeDashoffset}\n                className=\"progress-ring\" \n              />\n            </svg>\n            <div className=\"absolute inset-0 flex items-center justify-center\">\n              <span className=\"text-xl font-bold text-dashboard-amber\">\n                {readingProgress.currentBook.progress}%\n              </span>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"text-center\">\n          <p className=\"text-sm text-gray-300 mb-1\">Currently Reading:</p>\n          <p className=\"font-medium text-white text-sm\" data-testid=\"text-current-book\">\n            {readingProgress.currentBook.title}\n          </p>\n          <p className=\"text-xs text-gray-400\">by {readingProgress.currentBook.author}</p>\n        </div>\n        \n        <div className=\"bg-white/5 rounded-lg p-3 space-y-2\">\n          <div className=\"flex justify-between text-xs\">\n            <span className=\"text-gray-400\">Books read this year</span>\n            <span className=\"text-white font-medium\" data-testid=\"text-yearly-progress\">\n              {readingProgress.yearlyGoal.completed}/{readingProgress.yearlyGoal.target}\n            </span>\n          </div>\n          <div className=\"w-full bg-gray-700 rounded-full h-2\">\n            <div \n              className=\"bg-gradient-to-r from-dashboard-amber to-orange-400 h-2 rounded-full\" \n              style={{ width: `${(readingProgress.yearlyGoal.completed / readingProgress.yearlyGoal.target) * 100}%` }}\n            />\n          </div>\n        </div>\n      </div>\n    </Card>\n  );\n}\n","size_bytes":3309},"client/src/components/dashboard/widgets/rss-feed-widget.tsx":{"content":"import { Rss, RefreshCw } from \"lucide-react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\n\nexport function RSSFeedWidget() {\n  // Mock RSS data - in real app this would fetch from RSS feeds\n  const rssItems = [\n    {\n      id: \"1\",\n      title: \"The Future of Web Development: Trends to Watch\",\n      source: \"TechCrunch\",\n      timeAgo: \"2h ago\",\n      excerpt: \"Exploring the latest technologies and frameworks shaping modern web development...\"\n    },\n    {\n      id: \"2\", \n      title: \"AI Integration in Everyday Apps\",\n      source: \"Wired\",\n      timeAgo: \"4h ago\",\n      excerpt: \"How artificial intelligence is seamlessly integrated into the applications we use daily...\"\n    },\n    {\n      id: \"3\",\n      title: \"Design Systems at Scale\",\n      source: \"Medium\",\n      timeAgo: \"1d ago\", \n      excerpt: \"Best practices for implementing and maintaining design systems across large organizations...\"\n    }\n  ];\n\n  const handleRefresh = () => {\n    // In real app, this would refresh the RSS feed\n    console.log(\"Refreshing RSS feed\");\n  };\n\n  return (\n    <Card className=\"widget-card rounded-2xl p-6 animate-fade-in\" data-testid=\"widget-rss-feed\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <h3 className=\"text-lg font-semibold text-white flex items-center\">\n          <Rss className=\"text-dashboard-orange-500 mr-2\" size={20} />\n          RSS Feed\n        </h3>\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          className=\"text-dashboard-orange-500 hover:text-orange-400\"\n          onClick={handleRefresh}\n          data-testid=\"button-refresh-rss\"\n        >\n          <RefreshCw size={18} />\n        </Button>\n      </div>\n      \n      <div className=\"space-y-3 max-h-48 overflow-y-auto scrollbar-thin\">\n        {rssItems.map((item) => (\n          <div \n            key={item.id}\n            className=\"bg-white/5 rounded-lg p-3 hover:bg-white/10 transition-colors cursor-pointer\"\n            data-testid={`rss-item-${item.id}`}\n          >\n            <h4 className=\"font-medium text-white text-sm mb-1 line-clamp-2\">\n              {item.title}\n            </h4>\n            <p className=\"text-xs text-gray-400 mb-2\">\n              {item.source} â€¢ {item.timeAgo}\n            </p>\n            <p className=\"text-xs text-gray-300 line-clamp-2\">\n              {item.excerpt}\n            </p>\n          </div>\n        ))}\n      </div>\n    </Card>\n  );\n}\n","size_bytes":2469},"client/src/components/dashboard/widgets/todo-widget.tsx":{"content":"import { CheckSquare, Plus, Trash2 } from \"lucide-react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { AddTodoModal } from \"../modals/add-todo-modal\";\nimport type { TodoItem } from \"@shared/schema\";\n\nexport function TodoWidget() {\n  const [isAddModalOpen, setIsAddModalOpen] = useState(false);\n\n  const { data: todoItems = [], isLoading } = useQuery<TodoItem[]>({\n    queryKey: [\"/api/todos\"],\n  });\n\n  const updateTodoMutation = useMutation({\n    mutationFn: async ({ id, completed }: { id: string; completed: boolean }) => {\n      await apiRequest(\"PATCH\", `/api/todos/${id}`, { completed });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/todos\"] });\n    },\n  });\n\n  const deleteTodoMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"DELETE\", `/api/todos/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/todos\"] });\n    },\n  });\n\n  const completedCount = todoItems.filter(item => item.completed).length;\n  const totalCount = todoItems.length;\n  const progressPercentage = totalCount > 0 ? (completedCount / totalCount) * 100 : 0;\n\n  return (\n    <>\n      <Card className=\"widget-card rounded-2xl p-6 animate-fade-in\" data-testid=\"widget-todo\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-lg font-semibold text-white flex items-center\">\n            <CheckSquare className=\"text-dashboard-green mr-2\" size={20} />\n            To-Do List\n          </h3>\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            className=\"text-dashboard-green hover:text-green-300\"\n            onClick={() => setIsAddModalOpen(true)}\n            data-testid=\"button-add-todo\"\n          >\n            <Plus size={18} />\n          </Button>\n        </div>\n        \n        <div className=\"space-y-2 max-h-48 overflow-y-auto scrollbar-thin\">\n          {isLoading ? (\n            <div className=\"text-center text-gray-400 py-4\">Loading...</div>\n          ) : todoItems.length === 0 ? (\n            <div className=\"text-center text-gray-400 py-4\">\n              No tasks yet. Add your first todo!\n            </div>\n          ) : (\n            todoItems.map((item) => (\n              <div \n                key={item.id} \n                className=\"flex items-center space-x-3 p-2 hover:bg-white/5 rounded-lg transition-colors group\"\n                data-testid={`todo-item-${item.id}`}\n              >\n                <Checkbox\n                  checked={item.completed}\n                  onCheckedChange={(checked) =>\n                    updateTodoMutation.mutate({ id: item.id, completed: !!checked })\n                  }\n                  className=\"data-[state=checked]:bg-dashboard-green data-[state=checked]:border-dashboard-green\"\n                  data-testid={`checkbox-todo-${item.id}`}\n                />\n                <span \n                  className={`text-sm flex-1 ${\n                    item.completed ? \"text-gray-400 line-through\" : \"text-white\"\n                  }`}\n                >\n                  {item.text}\n                </span>\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  className=\"text-red-400 hover:text-red-300 opacity-0 group-hover:opacity-100 transition-opacity h-6 w-6\"\n                  onClick={() => deleteTodoMutation.mutate(item.id)}\n                  data-testid={`button-delete-todo-${item.id}`}\n                >\n                  <Trash2 size={12} />\n                </Button>\n              </div>\n            ))\n          )}\n        </div>\n        \n        {totalCount > 0 && (\n          <div className=\"mt-4 pt-4 border-t border-white/10\">\n            <div className=\"flex items-center justify-between text-xs text-gray-400\">\n              <span>Progress</span>\n              <span data-testid=\"text-todo-progress\">\n                {completedCount} of {totalCount} completed\n              </span>\n            </div>\n            <div className=\"w-full bg-gray-700 rounded-full h-1.5 mt-2\">\n              <div \n                className=\"bg-gradient-to-r from-dashboard-green to-emerald-400 h-1.5 rounded-full transition-all duration-300\" \n                style={{ width: `${progressPercentage}%` }}\n              />\n            </div>\n          </div>\n        )}\n      </Card>\n\n      <AddTodoModal\n        isOpen={isAddModalOpen}\n        onClose={() => setIsAddModalOpen(false)}\n      />\n    </>\n  );\n}\n","size_bytes":4760}},"version":1}